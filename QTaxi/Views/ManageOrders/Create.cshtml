@model QTaxi.Models.Order

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Order</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.address_from, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address_from, new { htmlAttributes = new { @class = "form-control geoplace" } })
                @Html.ValidationMessageFor(model => model.address_from, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.address_to, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address_to, new { htmlAttributes = new { @class = "form-control geoplace" } })
                @Html.ValidationMessageFor(model => model.address_to, "", new { @class = "text-danger" })
                <span id="distance"></span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.taxi_id, "taxi_id", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("taxi_id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.taxi_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.car_id, "car_id", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("car_id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.car_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.client_id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.client_id, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.client_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.client_phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.client_phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.client_phone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.client_name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.client_name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.client_name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.status_id, "status_id", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("status_id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.status_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

@*<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true"></script>*@
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false&libraries=places"></script>
<script type="text/javascript">
    

    function calcDistanceCallBack(result) {
        console.log(result);
        if (result.rows.length > 0)
        {
            var distance = result.rows[0].elements[0].distance;
            $("#distance").html(distance.text + ", " + distance.value);
        }
        var url = "https://maps.googleapis.com/maps/api/distancematrix/json?origins=%D0%9F%D0%BE%D0%BB%D1%82%D0%B0%D0%B2%D0%B0&destinations=20%20%D0%B2%D1%83%D0%BB%D0%B8%D1%86%D1%8F%20%D0%9A%D0%B0%D1%80%D0%BB%D0%B0%20%D0%9C%D0%B0%D1%80%D0%BA%D1%81%D0%B0,%20%D0%86%D1%80%D0%BF%D1%96%D0%BD%D1%8C,%20%D0%9A%D0%B8%D1%97%D0%B2%D1%81%D1%8C%D0%BA%D0%B0%20%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D1%8C,%20%D0%A3%D0%BA%D1%80%D0%B0%D1%97%D0%BD%D0%B0&mode=driving&language=ru-RU&key=AIzaSyAA9QFKaavXh0ADk0eseXwZNxq7qdfMrNA";
    }

    

    $(document).ready(function () {
        attachPlaceApi("geoplace");
    });
        
</script>
}
